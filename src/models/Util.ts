import { CardData, CardPropertyType, PlayerData } from "./PlayerData";

export function getCardsWithMostNeededProps(player: PlayerData): Array<CardData> {
  const hand = player.hand.filter(
    (card) => player.flipped.indexOf(card) === -1
  );

  const neededProps = mostNeededProps(player);
  const cardsWithNeededProps = neededProps.map((prop) => getPositiveCardWithProp(hand, prop.type)).filter((card) => card !== undefined);

  if (cardsWithNeededProps && cardsWithNeededProps.length > 0) {
    return cardsWithNeededProps as Array<CardData>;
  }
  return [];
}

export function getCardsWithoutNeededProps(player: PlayerData)
{
  const hand = player.hand.filter(
    (card) => player.flipped.indexOf(card) === -1
  );
  const neededProps = mostNeededProps(player);
  const cardsWithoutNeededProps = neededProps.map((prop) => getCardWithoutProp(hand, prop.type)).filter((card) => card !== undefined);
  if (cardsWithoutNeededProps && cardsWithoutNeededProps.length > 0) {
    return cardsWithoutNeededProps as Array<CardData>;
  }
  return [];
}


const getCardWithoutProp = (
  hand: Array<CardData>,
  propType: CardPropertyType
): CardData | undefined => {
  for (let i = 0; i < hand.length; i++) {
    const card = hand[i]!;
    const prop = card.properties.find((prop) => prop.type === propType);
    if (prop === undefined || prop.value === 0) {
      return card;
    }
  }
};



const getPositiveCardWithProp = (
  hand: Array<CardData>,
  propType: CardPropertyType
): CardData | undefined => {
  return hand.find((card) => {
    return card.properties.find(
      (prop) => prop.type === propType && prop.value > 0
    );
  });
};

const getPropValueNeededForMilestone = (
  player: PlayerData,
  propType: CardPropertyType
) => {
  const curValue = player.properties.find(
    (prop) => prop.type === propType
  )!.value;
  const neededForMs = player.milestone.requirements.find(
    (ms) => ms.type === propType
  )!.value;
  return neededForMs - curValue;
};

const mostNeededProps = (player: PlayerData) => {
  const props = player.properties;
  const result: Array<{ type: CardPropertyType; needed: number }> = [];
  props.forEach((prop) => {
    const needed = getPropValueNeededForMilestone(player, prop.type);
    if (needed > 0) {
      result.push({ type: prop.type, needed });
    }
  });
  return result.sort((a, b) => b.needed - a.needed);
};

//200 elements
export const randomNumbersArray=[
    0.1506477287117275,
    0.1497269282571716,
    0.6984560209748846,
    0.045843370706499575,
    0.5444485950723363,
    0.5615958599495677,
    0.3198618734540839,
    0.24429867715826536,
    0.05801638938426845,
    0.09631775936047793,
    0.29942855752704145,
    0.12399134712188409,
    0.5365838052899085,
    0.14511351422482943,
    0.7733435294079841,
    0.9812295105186757,
    0.48749163207921575,
    0.7891337077565721,
    0.47029815635503813,
    0.283110195050848,
    0.7361898603014726,
    0.9066817520980367,
    0.0853285002525831,
    0.3560207974527726,
    0.4520560889386285,
    0.19671760447372688,
    0.3043671508059319,
    0.9839749205187839,
    0.8982552882597552,
    0.8391710454046649,
    0.4350177709861497,
    0.770217944812884,
    0.7749466206548523,
    0.551122717407301,
    0.19746151296367587,
    0.21175019201676804,
    0.22399235743828438,
    0.08464386598612139,
    0.8086510272801711,
    0.404655242199109,
    0.057002026639378034,
    0.4499202878885108,
    0.10617634909563389,
    0.8175854316073775,
    0.5561242076826037,
    0.024008785491772433,
    0.4817032322246494,
    0.2440862501894856,
    0.665068841376629,
    0.30411849822001036,
    0.44738956417234865,
    0.5262078301209009,
    0.3889682934792382,
    0.1617214719277491,
    0.1921477081536821,
    0.13596347983853063,
    0.651786429465841,
    0.6554763740861018,
    0.6544648448763823,
    0.14072006715028929,
    0.44086461858088566,
    0.7258044175725137,
    0.8691589149749872,
    0.9059396799076551,
    0.368467132470893,
    0.30352054932607486,
    0.13746697586932044,
    0.6859262532842736,
    0.9799548460559162,
    0.7794491966284333,
    0.7434436272624584,
    0.731948513756009,
    0.2723801041371344,
    0.694011582381648,
    0.4543114063652607,
    0.6095544353616645,
    0.3225679219030162,
    0.42182330319741823,
    0.24351851637557342,
    0.9961792790682705,
    0.3792160169869955,
    0.9132430525146124,
    0.03649028603247295,
    0.22165458286899675,
    0.8580399609169223,
    0.22358165884039694,
    0.9931023641418787,
    0.8697727047469005,
    0.43814403458252327,
    0.3106783234539624,
    0.4277058017342158,
    0.8013604290659793,
    0.677362564466892,
    0.36675795714794446,
    0.6669539264423646,
    0.7282086860691354,
    0.07657864486913823,
    0.010492235186818744,
    0.7117265770288103,
    0.960208535123106,
    0.013487767858258004,
    0.051031797498535814,
    0.3164546179997829,
    0.5094552306581184,
    0.9432470969151792,
    0.07408911730480183,
    0.7298106476413301,
    0.0987475949695309,
    0.6869157822720254,
    0.22036197291784454,
    0.7298457307023376,
    0.7923554432831469,
    0.7903499367554148,
    0.37775739077239023,
    0.38736517433273354,
    0.6691084492912183,
    0.8831090070552092,
    0.715894604999563,
    0.11243221361770661,
    0.6000179581123303,
    0.2778475053111703,
    0.7479499252377607,
    0.16808794689595408,
    0.19155518354982526,
    0.920366633134214,
    0.37073823509111026,
    0.28368512794787504,
    0.6574933071543085,
    0.8343585668940844,
    0.5490808892080479,
    0.7445975965416212,
    0.8468612055796738,
    0.4268763312663697,
    0.7801736201773266,
    0.0806649437109056,
    0.9606721979492744,
    0.2357974272688037,
    0.8130526639932362,
    0.7652355747482661,
    0.8502882556359428,
    0.8801694652250239,
    0.9269200228997491,
    0.1607306929122363,
    0.8253186733712592,
    0.9530263199478414,
    0.2025432070715406,
    0.44606032171745236,
    0.5605342953420697,
    0.7971768778179141,
    0.7221912865286723,
    0.5141334557741908,
    0.15312984350870829,
    0.6676446698914811,
    0.24311934696188842,
    0.1497901170161765,
    0.9314674317323771,
    0.8180826679765486,
    0.5413826322006288,
    0.5410114003675381,
    0.2629214315365127,
    0.15900568387187308,
    0.7628090855075419,
    0.721193107362294,
    0.36650337533094235,
    0.4109628496240415,
    0.9130732154122234,
    0.2543919704502474,
    0.5631623656383742,
    0.8001732158181831,
    0.564543493429435,
    0.4582348900450518,
    0.9570466375907857,
    0.3681035188198438,
    0.07136944902436027,
    0.8287266148893964,
    0.08389595380373682,
    0.9722049198319561,
    0.6698684740780595,
    0.5423538687210895,
    0.9027815524258653,
    0.3548379171568574,
    0.9252215575015431,
    0.5036530039574035,
    0.5989793341306555,
    0.7205222315281918,
    0.7266843224191352,
    0.4615645728631599,
    0.9194375374564797,
    0.6293290187195091,
    0.8888821932141493,
    0.8349765444842203,
    0.20415938397357347,
    0.35636768683831943,
    0.20133669603371085
];